---
// Import Vue functionality
import { ref } from 'vue';
import '@astrojs/tailwind';

// Vue reactive states
const file = ref(null);
const uploadProgress = ref(0);
const responseData = ref([]);

// Event handlers and methods using Vue's Composition API
function handleFileSelect(event) {
  file.value = event.target.files[0];
}

function handleFileDrop(event) {
  event.preventDefault();
  file.value = event.dataTransfer.files[0];
}

function uploadFile() {
  if (!file.value) {
    alert('Please select a file to upload.');
    return;
  }

  const formData = new FormData();
  formData.append('file', file.value);

  const xhr = new XMLHttpRequest();
  xhr.open('POST', 'https://jm-tools-python-serverless-api.vercel.app/api/region_tribs/process_pdf', true);

  xhr.upload.onprogress = function (e) {
    if (e.lengthComputable) {
      uploadProgress.value = (e.loaded / e.total) * 100;
    }
  };

  xhr.onload = function () {
    if (xhr.status === 200) {
      // Parse the JSON response and set the reactive state
      responseData.value = JSON.parse(xhr.responseText);
      // Reset upload progress
      uploadProgress.value = 0;
    } else {
      alert('An error occurred while uploading the file.');
    }
  };

  xhr.send(formData);
}

// Function to copy table data as tab-delimited text
function copyTableData(pageIndex) {
  const pageData = responseData.value[pageIndex];
  let tabDelimitedText = pageData.map((row) => Object.values(row).join('\t')).join('\n');
  navigator.clipboard.writeText(tabDelimitedText).then(() => {
    alert('Table data copied to clipboard!');
  }, (err) => {
    alert('Failed to copy table data: ', err);
  });
}
---

<div class="container mx-auto p-4">
  <div
    class="border-dashed border-4 border-gray-200 rounded p-4 text-center"
    @drop.prevent="handleFileDrop"
    @dragover.prevent
  >
    <p>Drag and drop your PDF file here, or click to select a file</p>
    <input type="file" accept=".pdf" @change="handleFileSelect" />
  </div>

  <button class="mt-4 bg-blue-500 text-white py-2 px-4 rounded" @click="uploadFile">
    Upload PDF
  </button>

  <div class="mt-4">
    <progress :value="uploadProgress" max="100"></progress>
  </div>

  <textarea class="mt-4 w-full p-2 border text-sm" rows="6" readonly v-model="responseText"></textarea>
  
  <div>Hello there</div>

  <!-- Render tables from response data -->
  <div v-if="responseData.value.length > 0">
    <div v-for="(pageData, pageIndex) in responseData.value" :key="pageIndex" class="mb-8">
      <button class="mb-2 bg-green-500 text-white py-1 px-3 rounded" @click="copyTableData(pageIndex)">
        Copy Page {{ pageIndex + 1 }} Data
      </button>
      <table class="table-auto w-full mb-4">
        <thead>
          <tr class="bg-gray-100">
            <!-- Assuming 'Region' is one of the keys -->
            <th class="px-4 py-2" v-for="(value, key) in pageData[0]" :key="key">
              {{ key }}
            </th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="item in pageData" :key="item">
            <td class="px-4 py-2" v-for="value in item">
              {{ value }}
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
